package gov.nasa.jpl.mbee.mdk.mms.actions;

import com.nomagic.magicdraw.actions.MDAction;
import com.nomagic.magicdraw.core.Application;
import com.nomagic.magicdraw.core.Project;
import com.nomagic.ui.ProgressStatusRunner;
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element;
import gov.nasa.jpl.mbee.mdk.MDKPlugin;
import gov.nasa.jpl.mbee.mdk.api.incubating.convert.Converters;
import gov.nasa.jpl.mbee.mdk.docgen.ViewViewpointValidator;
import gov.nasa.jpl.mbee.mdk.generator.DocumentAndPdfWriter;
import gov.nasa.jpl.mbee.mdk.generator.DocumentGenerator;
import gov.nasa.jpl.mbee.mdk.generator.PostProcessor;
import gov.nasa.jpl.mbee.mdk.model.Document;
import gov.nasa.jpl.mbee.mdk.options.MDKOptionsGroup;
import gov.nasa.jpl.mbee.mdk.util.Utils;
import org.apache.commons.lang.exception.ExceptionUtils;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Collections;

/**
 * Action to Generate DocBook(xml) from MD Document Model, then Convert it to PDF
 */
public class GeneratePdfAction extends MDAction {

    public static final String DEFAULT_ID = GeneratePdfAction.class.getSimpleName();

    protected final Element view;

    protected File xslDefaultFile;
    protected File pdfDefaultDir;

    private static final long serialVersionUID = 1L;

    public GeneratePdfAction(String id, String name, Element view) {
        super(id, name, null, null);
        this.view = view;
    }

    public GeneratePdfAction(Element view) {
        this(DEFAULT_ID, "PDF", view);

    }

    protected File fileSelect(String title, File defaultFile, String approveButtonText, FileNameExtensionFilter filter) {
        JFileChooser choose = new JFileChooser();
        if (defaultFile != null) {
            if (defaultFile.isDirectory()) {
                choose.setCurrentDirectory(defaultFile);
            }
            else {
                choose.setSelectedFile(defaultFile);
            }
        }
        choose.setDialogTitle(title);

        if (filter != null) {
            choose.addChoosableFileFilter(filter);
            choose.setFileFilter(filter);
        }
        int retval = choose.showDialog(null, approveButtonText);
        if (retval == JFileChooser.APPROVE_OPTION) {
            File selectedFile = choose.getSelectedFile();
            int overwriteOption;
            if (selectedFile.exists() && approveButtonText.toLowerCase().compareTo("save") == 0) {
                overwriteOption = JOptionPane.showConfirmDialog(choose, "The file already exists. Do you want to overwrite it?", "Overwrite Confirmation", JOptionPane.OK_CANCEL_OPTION);
                if (overwriteOption == JOptionPane.OK_OPTION) {
                    return selectedFile;
                }
                else {
                    return null;
                }
            }
            else
            	return selectedFile;
        }
        return null;
    }
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            //1. ask for the outputfile (pdf) file
            File outputPdfFile = askForPdfFile();
            if (outputPdfFile != null) {
                //assign docbook xml be created filename based on the pdf file
                File autoGeneratedDocBookFile = new File(outputPdfFile + ".xml");
                //2. get stylesheet (xsl) info from options->Environment->MDK
                if (checkForStyleSheetXmlFile()) {
                    generate(autoGeneratedDocBookFile, xslDefaultFile, outputPdfFile);
                }
            }
        } catch (Exception ex) {
            Application.getInstance().getGUILog().log("[ERROR] Failed to generate a PDF." + ExceptionUtils.getStackTrace(ex));
        }
    }
    protected boolean checkForStyleSheetXmlFile() {
        Application.getInstance().getGUILog().log("[INFO] The default stylesheet can be set at \"Default Docbook to PDF Stylesheet\" in Options -> Environment -> MDK");
        if (MDKOptionsGroup.getMDKOptions().getDocBookToPDFStyleSheet() != null && !MDKOptionsGroup.getMDKOptions().getDocBookToPDFStyleSheet().trim().isEmpty()) {
            xslDefaultFile = new File(MDKOptionsGroup.getMDKOptions().getDocBookToPDFStyleSheet().trim());
        }
        else {
            xslDefaultFile = new File(MDKPlugin.getInstance().getDescriptor().getPluginDirectory(), "docbook-xsl" + File.separator + "fo" + File.separator + "mdk-default.xsl");
        }
        //Ask to select the stylesheet - a user has an opportunity to change the stylesheet.
        xslDefaultFile = fileSelect("Select a stylesheet (XSL)", xslDefaultFile, "Select", new FileNameExtensionFilter("Stylesheet (XSL)", "xsl"));

        //if environment - mdk option is <install dir>/plugin/.. .xsl by use selected, <install dir> is empty.
        if (xslDefaultFile == null || !xslDefaultFile.exists()) {
            Application.getInstance().getGUILog().log("[WARNING] The stylesheet does not exist. Please select the stylesheet.");
            //ask for one more time
            xslDefaultFile = fileSelect("Select a stylesheet (XSL)", xslDefaultFile, "Select", new FileNameExtensionFilter("Stylesheet (XSL)", "xsl"));
            if (xslDefaultFile == null || !xslDefaultFile.exists()) {
                Application.getInstance().getGUILog().log("[ERROR] The stylesheet does not exist. The operation cancelled.");
                return false; //cancel or the file does not exist.
            }
        }
        else {
            MDKOptionsGroup.getMDKOptions().setDocBookToPDFStyleSheet(xslDefaultFile.getAbsolutePath());
        }
        Application.getInstance().getGUILog().log("[INFO] The stylesheet selected is " + xslDefaultFile.getAbsolutePath());
        return true;

    }

    protected File askForPdfFile() {
        File outputPdfFile = fileSelect("Save as", new File(pdfDefaultDir, view.getHumanName().substring(view.getHumanType().length()).trim() + ".pdf"), "Save", new FileNameExtensionFilter("PDF", "pdf"));
        if (outputPdfFile == null) {
            return null;
        }
        pdfDefaultDir = outputPdfFile.getParentFile();
        //if a output file is not *.pdf then add *.pdf.
        if (!outputPdfFile.getName().endsWith(".pdf")) {
            outputPdfFile = new File(outputPdfFile + ".pdf");
        }
        return outputPdfFile;
    }


    protected Document prepToDocBook() {
        Project project = Application.getInstance().getProject();
        ViewViewpointValidator dv = new ViewViewpointValidator(Collections.singleton(view), project, true);
        dv.run();
        if (dv.isFailed()) {
            Application.getInstance().getGUILog().log("[ERROR] View validation failed for " + Converters.getElementToHumanNameConverter().apply(view) + ". Aborting generation.");
            Utils.displayValidationWindow(project, dv.getValidationSuite(), dv.getValidationSuite().getName());
            return null;
        }
        DocumentGenerator dg = new DocumentGenerator(view, dv, null);
        Document dge = dg.parseDocument();
        new PostProcessor().process(dge);
        return dge;
    }
   
    //MDK Document model -> PDF file
    protected void generate(File autoGeneratedDocbookfile, File docbookXslFo, File outputPdfFile) {
        Application.getInstance().getGUILog().log("Generating PDF in " + outputPdfFile.getAbsolutePath());
        Document doc = prepToDocBook();
        if (doc != null) {
            ProgressStatusRunner.runWithProgressStatus(new DocumentAndPdfWriter(doc, doc.getGenNewImage(), autoGeneratedDocbookfile, docbookXslFo, outputPdfFile), "DocGen", true, 0);
        }

    }
}
