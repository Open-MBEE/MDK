import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.zip.ZipFile

String buildBranch = project.getProperties().get('buildBranch');
if (buildBranch == null || buildBranch != 'master' && !buildBranch.matches('support/[0-9.]+')) {
    version += '-SNAPSHOT'
}
String buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : System.currentTimeSeconds()
String buildAccess = project.getProperties().getOrDefault('buildAccess', 'external');
String timestamp = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH:mm").format(LocalDateTime.now())

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.0'
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.3'
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'rebel'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    // mavenCentral()
    if (buildAccess == 'internal') {
        maven {
            url 'https://cae-artifactory.jpl.nasa.gov/artifactory/maven-libs-snapshot-virtual'
            credentials {
                username project.getProperties().get('artifactory_user')
                password project.getProperties().get('artifactory_password')
            }
        }
    }
    else {
        ivy {
            // http://d1g91r27pzl568.cloudfront.net/magicdraw184sp1/MagicDraw_184_sp1_no_install.zip
            // http://d1g91r27pzl568.cloudfront.net/sysml184sp1/SysML_Plugin_184_sp1_bundle.zip
            // http://d1g91r27pzl568.cloudfront.net/cst184sp1/Cameo_Simulation_Toolkit_184_sp1.zip
            url 'http://d1g91r27pzl568.cloudfront.net/'
            layout 'pattern', {
                artifact '/[module][revision]/[classifier].[ext]'
            }
        }
    }
}

configurations {
    preCompile
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Production code requires MagicDraw patches to compile
    if (buildAccess == 'internal') {
        preCompile group: 'gov.nasa.jpl.cae.magicdraw', name: 'cae-magicdraw-core', version: '3.0.0-SNAPSHOT', ext: 'zip'
    }
    else {
        preCompile group: 'com.nomagic', name: 'magicdraw', version: '184sp1', classifier: 'MagicDraw_184_sp1_no_install', ext: 'zip'
        preCompile group: 'com.nomagic', name: 'sysml', version: '184sp1', classifier: 'SysML_Plugin_184_sp1_bundle', ext: 'zip'
        preCompile group: 'com.nomagic', name: 'cst', version: '184sp1', classifier: 'Cameo_Simulation_Toolkit_184_sp1', ext: 'zip'
    }
    
    // SLF4J API
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    // compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21+'
    
    // SLF4J-Log4j12
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
    // compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21+'

    // JSoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.6.1'
    // compile group: 'org.jsoup', name: 'jsoup', version: '1.9.1+'
    
    // JGraphT 
    compile group: 'net.sf.jgrapht', name: 'jgrapht', version: '0.8.3'
    // compile group: 'org.jgrapht', name: 'jgrapht', version: '1.0.0+'
    
    // JSON Simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    // compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1+'
    
    // SwingX-All
    compile group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.4'
    // compile group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.5+'
    
    // OpenCSV
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    // compile group: 'com.opencsv', name: 'opencsv', version: '3.8+'
    
    // ActiveMQ 
    compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.9.1'
    // compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.14.0+'

    // Jackson
    compile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: '2.8.3'

    // JSON Patch
    compile group: "com.box", name: "json-patch", version: "1.13"

    // Apache Commons-IO
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
//    compile group: 'commons-io', name: 'commons-io', version: '2.4'

    // Apache HTTP
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'
    
    // Other dependencies we're unable to resolve via repositories
    compile fileTree(dir: 'build/dependency-cache/extracted', include: ['lib/**/*.jar', 'plugins/**/*.jar'], exclude: ['plugins/com.nomagic.collaborator.publisher/**/*.jar', 'plugins/com.nomagic.magicdraw.emfuml2xmi*/**/*.jar'])
    compile fileTree(dir: 'lib', include: ['**/*.jar'])
    
	// Test Dependencies
    //testCompile 'junit:junit:4.11'
    //compile 'junit:junit:4.11'
}

task extractDependencies {
    configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        inputs.file artifact.file
        def zipFile = new ZipFile(artifact.file)
        zipFile.entries().each { entry ->
            if (!entry.isDirectory()) {
                outputs.file 'build/dependency-cache/extracted/' + entry.getName()
            }
        }
    }
    doLast {
        inputs.files.each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
        fileTree(dir: 'build/dependency-cache/extracted', include: '*.zip').each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
        /*fileTree(dir: 'build/dependency-cache/extracted').each { file ->
            outputs.file file
        }*/
    }
}
compileJava.dependsOn extractDependencies

class PreDist extends DefaultTask {
    String humanVersion
    String internalVersion
    String buildTimestamp
    String descriptor

    @TaskAction
    public void executeTask() {
        project.copy {
            from 'src/main/dist'
            exclude 'template'
            from 'src/main/dist/template'
            into 'build/generated-dist'
        }
        project.copy {
            from project.configurations.compile.resolvedConfiguration.resolvedArtifacts.file
            from 'lib'
            from project.jar
            into "build/generated-dist/plugins/${project.group}"
        }

        String pluginLibraries = ''
        project.fileTree(dir: "build/generated-dist/plugins/${project.group}", include: '**/*.jar').each { file ->
            pluginLibraries += '\t\t<library name=\"' + file.absolutePath.replaceAll(~/.*build\/generated-dist\/plugins\/${project.group}\//, '') + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/plugins/${project.group}/plugin.xml"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + pluginLibraries) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into "build/generated-dist/plugins/${project.group}"
        }

        String descriptorFiles = ''
        project.fileTree(dir: 'build/generated-dist').each { file ->
            String relativePath = file.absolutePath.replaceAll(/.*build\/generated-dist\//, '');
            descriptorFiles += '\t\t<file from=\"' + relativePath + '\" to=\"' + relativePath + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/data/resourcemanager/${descriptor}"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + descriptorFiles) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            filter { String line -> line.replace('${build.timestamp}', buildTimestamp) }
            into 'build/generated-dist/data/resourcemanager'
        }
    }
}

task preDist(type: PreDist, dependsOn: jar) {
    humanVersion = version
    internalVersion = buildNumber
    buildTimestamp = timestamp
    descriptor = descriptorFile
}

distributions {
    main {
        contents {
            exclude 'template'
            from 'build/generated-dist'
        }
    }
}

assembleDist.dependsOn.remove distTar
tasks.remove(distTar)

distZip {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    eachFile { file ->
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
}

distZip.dependsOn preDist

javadoc {
    options.addStringOption("sourcepath", "")
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output

    exclude 'gov/nasa/jpl/mbee/mdk/test/framework/**'
    exclude 'org/**'
    exclude 'worker/**'
    //include 'gov/nasa/jpl/mbee/mdk/test/tests/**'
}

task testsHackJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests-hack'
    from sourceSets.test.output

    include 'gov/nasa/jpl/mbee/mdk/test/framework/**'
    include 'org/**'
    include 'worker/**'
    exclude 'gov/nasa/jpl/mbee/mdk/test/tests/**'

    manifest {
        attributes(
            'Main-Class': 'gov.nasa.jpl.mbee.mdk.test.framework.GradleMagicDrawLauncher'
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (buildAccess == 'internal') {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    publishing {
        // Reference to Gradle publications defined in the build script.
        // This is how we tell the Artifactory Plugin which artifacts should be
        // published to Artifactory.
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact testsJar {
                    classifier "tests"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
                artifact distZip {
                    classifier "plugin"
                }
            }
        }
    }

    artifactory {
        contextUrl = 'https://cae-artifactory.jpl.nasa.gov/artifactory/'
        publish {
            repository {
                repoKey = 'maven-plugins-' + (version.endsWith('SNAPSHOT') ? 'snapshot' : 'release') + '-local' // The Artifactory repository key to publish to
                username = project.getProperties().get('artifactory_user') // The publisher user name
                password = project.getProperties().get('artifactory_password') // The publisher password
                maven = true
            }
            defaults {
                publications('mavenJava')
                publishArtifacts = true
                // Properties to be attached to the published artifacts.
                //properties = ['qa.level': 'basic', 'dev.team' : 'core']
                // Publish generated POM files to Artifactory (true by default)
                publishPom = true
            }
        }
    }

    artifactoryPublish.dependsOn distZip
}

installDist {
    destinationDir = file('build/plugin')
    doLast {
        copy {
            fileMode 0755
            from 'build/dependency-cache/extracted'
            from 'build/plugin'
            into 'build/install'
        }
    }
}

installDist.dependsOn distZip

task runJava(type: JavaExec) {
    classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx4000M', '-Xss1024M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true']
    // arguments to pass to the application
    args 'DEVELOPER'
}

runJava.dependsOn installDist
runJava.dependsOn generateRebel

task testAVG(type: JavaExec) {
    classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar', 'plugins/gov.nasa.jpl.mbee.mdk/*.jar'])
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx4000M', '-Xss1024M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dcom.nomagic.magicdraw.launcher=gov.nasa.jpl.mbee.pma.analyses.AutomatedViewGeneration']
    // arguments to pass to the application
    args '-twprj', 'ID_10_20_16_12_01_59_AM__58f6714a_157e0e07e65__7ffd_LMC_055004_192_168_1_27', '-doclist', '_18_0_2_bec02f9_1444944948911_779834_74342', '-crdlc', '../../resources/mms.properties', '-twbrn', 'Branch2'
}

testAVG.dependsOn installDist
testAVG.dependsOn generateRebel



task runScript(type: Exec) {
    workingDir "build/install"
    ignoreExitValue = true

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'bin\\magicdraw.exe'
    } else {
        commandLine 'sh', 'bin/magicdraw'
    }
}

runScript.dependsOn installDist

test {
    testLogging.showStandardStreams = true
    forkEvery 1

    workingDir 'build/install'

    /**
     * The short version of the rationale is that with 18.4, MagicDraw introduced the OSGi framework as part of its
     * implementation.
     * Gradle and JUnit work very well together out of the box (generated reports in XML and HTML, tight IDE/Jenkins
     * integration, etc.), and Gradle and OSGi was made to work with the runJava task.
     * However, Gradle had to implement a number of hacks to overcome OS limitations and achieve features that can be
     * applied to a broad range of software.
     * Those hacks work well with most applications but not OSGi (commentary: OSGi doesn't play well with anyone), so
     * we implemented a number of hacks ourselves.
     * They involve classloading order, classpath redirection using the jar argument, reflection, and dynamic
     * classloading.
     * Ultimately, this enabled the use of the well-supported and feature-rich Gradle test task, but at the cost of
     * an implementation that could break in the unlikely, albeit possible, case of either Gradle or MagicDraw
     * significantly changing their implementations of the test and OSGi frameworks, respectively.
     *
     * Clears the default classpath since all the necessary libraries are being passed as arguments to
     * GradleMagicDrawLauncher to be added to the OSGi classpath.
     * Then it utilizes the -jar JVM argument to override the default Gradle command and pass the original command
     * as arguments to the main class of the jar, GradleMagicDrawLauncher,
     * including the classpath arguments (one of our own and one of Gradle's). It additionally parses and sets the
     * system properties that are passed.
     *
     * Example command: .../java -Dcom.nomagic.osgi.config.dir=configuration -Desi.system.config=data/application.conf -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Dlogback.configurationFile=data/logback.xml -Dmd.class.path=$java.class.path -jar /Users/igomes/mdk/build/libs/mdk-*-tests-hack.jar -cp ... -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -ea -cp .../.gradle/caches/.../workerMain/gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 1'
     *
     * @author igomes
     */
    classpath = files()
    jvmArgs = ['-jar', testsHackJar.outputs.files.singleFile, '-cp', fileTree(dir: 'build/generated-dist', include: '**/*.jar').asPath + /*fileTree(dir: 'build/install', include: ['plugins/** /*.jar']).asPath + */fileTree(dir: 'build/install', include: ['lib/**/*.jar']).asPath + File.pathSeparator + testsJar.outputs.files.singleFile, '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-test', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true']
}

test.dependsOn testsJar
test.dependsOn testsHackJar
test.dependsOn installDist